{
  "name": "Generate Scoping Call Prep",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "scoping-call-prep",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        -192
      ],
      "id": "179fdc2e-228c-4bd7-8754-8b16c9017041",
      "name": "Catch Project ID",
      "webhookId": "0151c6b8-b14e-48eb-88dc-ba168fc56590"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ffc4f268-da69-4203-b8ad-20760421e0e1",
              "leftValue": "={{ $json.body.project_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "034143d7-a567-444f-b7b2-aa8a2d839727",
              "leftValue": "={{ $json.body.project_id }}",
              "rightValue": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        224,
        -192
      ],
      "id": "77846c6e-1a6f-4c66-b6c1-532533e81fc0",
      "name": "Validate Project ID"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "strms_project_files",
        "limit": 1,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "project_id",
              "condition": "eq",
              "keyValue": "={{ $('Catch Project ID').item.json.body.project_id }}"
            },
            {
              "keyName": "file_type_id",
              "condition": "eq",
              "keyValue": "demo-call-transcript"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        448,
        -192
      ],
      "id": "58f0a84a-bc38-43dd-ae3d-c15e802d3986",
      "name": "Query Transcript Metadata",
      "credentials": {
        "supabaseApi": {
          "id": "ZHhTrJNxn34MA3CW",
          "name": "GL AI Console Supabase Key"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "03894630-d705-495a-937f-50fea2eb4b42",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        672,
        -192
      ],
      "id": "79d1bd6a-98a7-41f0-9264-9f84e42bedb6",
      "name": "Check Transcript Found"
    },
    {
      "parameters": {
        "url": "=https://scahyfdsgpfurpcnwyrb.supabase.co/storage/v1/object/{{ $json.storage_bucket }}/{{ $json.storage_path }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        896,
        -192
      ],
      "id": "71f547c1-bf7a-4b86-8435-0bc389b69924",
      "name": "Download Transcript",
      "credentials": {
        "httpHeaderAuth": {
          "id": "8o7ThfsHa3QWcSYa",
          "name": "GL AI Console Supabase Service Role Key"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-nano",
          "mode": "list",
          "cachedResultName": "GPT-5-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an expert AI assistant working for STRMS — a team that builds traditional automations, AI workflows, and AI agents for customers. You specialize in analyzing sales and demo call transcripts to extract actionable insights for project scoping and planning.\n\nYour task is to read the provided transcript of a customer demo call and produce a clear, structured “Scoping Call Preparation Document.” The goal is to help the STRMS team prepare for the next call with the customer.\n\nThe document should be concise, professional, and tailored for internal use by the STRMS team. Avoid fluff and ensure every section adds value.\n\nThe final document must include the following sections:\n\n1. **Customer Summary**  \n   - Who the customer is  \n   - What they do  \n   - Their main business goals or challenges  \n\n2. **Demo Summary**  \n   - Key topics discussed during the demo  \n   - What resonated most with the customer  \n   - Any concerns or blockers mentioned  \n\n3. **Identified Opportunities**  \n   - Specific automation, AI workflow, or AI agent opportunities discussed  \n   - Potential impact or business value  \n   - Technical or integration notes  \n\n4. **Next Call Objectives**  \n   - What STRMS needs to clarify or confirm  \n   - Key questions to ask in the scoping call  \n   - Expected outcomes of the next meeting  \n\n5. **Action Items for STRMS Team**  \n   - Prep tasks before the next call (e.g., research, prototype ideas, data gathering)  \n   - Assigned roles if possible (e.g., engineer, PM, account manager)\n\nTone: professional, clear, and insight-driven.  \nAudience: internal STRMS project and sales teams.\n",
              "role": "system"
            },
            {
              "content": "=Here’s the transcript of a demo call we had with a customer. Please analyze it and generate a “Scoping Call Preparation Document” following the structure and guidance in the system prompt above.\n\nTranscript:\n{{ $json.data }}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1120,
        -192
      ],
      "id": "3d553f91-f1c2-4f56-b115-e0b0693c7212",
      "name": "Generate Scoping Call Prep",
      "credentials": {
        "openAiApi": {
          "id": "lSSimk5MMw6cbVWo",
          "name": "Automation OpenAI API Key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format the AI-generated output with headers and metadata for a Scoping Call Prep document\nconst projectId = $('Catch Project ID').first().json.body.project_id;\nconst aiResponse = $input.first().json.message.content;\n\n// Generate timestamp for filename\nconst now = new Date();\nconst timestamp = now\n  .toISOString()\n  .replace(/[-:]/g, '')\n  .split('.')[0]\n  .replace('T', '_');\n\nconst dateFormatted = now.toISOString().split('T')[0];\nconst timeFormatted = now.toTimeString().split(' ')[0];\n\n// Construct plain text document\nlet formattedDocument = `===================================================\nSCOPING CALL PREP DOCUMENT\n===================================================\nProject ID: ${projectId}\nGenerated: ${dateFormatted} ${timeFormatted}\nGenerated By: AI Automation\n===================================================\n\n${aiResponse}\n\n===================================================\nEnd of Scoping Prep\nGenerated automatically by GrowthLab AI Console\n===================================================`;\n\n// ✅ Normalize all characters to pure UTF-8-safe plain text\nformattedDocument = formattedDocument\n  // Convert smart quotes to plain quotes\n  .replace(/[“”]/g, '\"')\n  .replace(/[‘’]/g, \"'\")\n  // Convert en and em dashes to hyphens\n  .replace(/[–—]/g, '-')\n  // Replace ellipsis with three dots\n  .replace(/…/g, '...')\n  // Replace bullet points with a dash\n  .replace(/•/g, '-')\n  // Normalize weird whitespace characters\n  .replace(/\\u00A0/g, ' ') // non-breaking spaces\n  .replace(/\\r?\\n/g, '\\n'); // consistent newlines\n\n// ✅ Encode cleanly for JSON storage (ensures safe UTF-8 serialization)\nconst jsonSafeFormatted = JSON.stringify(formattedDocument);\n\n// ✅ Parse back to remove extra quotes\nconst safeDocument = JSON.parse(jsonSafeFormatted);\n\nreturn [\n  {\n    json: {\n      project_id: projectId,\n      formatted_prep: safeDocument,\n      prep_content: aiResponse,\n      generation_timestamp: timestamp,\n    },\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1472,
        -192
      ],
      "id": "7b60348f-c6e7-4105-81da-4d75245914a9",
      "name": "Format Scoping Call Prep Doc"
    },
    {
      "parameters": {
        "jsCode": "// Generate filename and storage path for Scoping Call Prep document\nconst projectId = $('Catch Project ID').first().json.body.project_id;\nconst timestamp = $input.first().json.generation_timestamp;\n\nconst filename = `project_${projectId}_scoping_call_prep_${timestamp}.txt`;\nconst storagePath = `${projectId}/scoping-prep-doc/${filename}`;\n\nreturn [\n  {\n    json: {\n      ...($input.first().json),\n      generated_filename: filename,\n      storage_path: storagePath,\n      upload_path: storagePath\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1696,
        -192
      ],
      "id": "de09bf45-8823-4e70-b555-9b996fe5c57a",
      "name": "Generate Filename"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bf953a9e-5325-4727-9f40-04ee6d33b261",
              "name": "file_size",
              "value": "={{ $json.formatted_prep.length }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1920,
        -192
      ],
      "id": "db0d6343-bfeb-4314-bd77-93cae4cf3440",
      "name": "Calculate File Size"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://scahyfdsgpfurpcnwyrb.supabase.co/storage/v1/object/strms-project-files/{{ $json.upload_path }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "text/plain"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "Text/Plain",
        "body": "={{ $json.formatted_prep }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2144,
        -192
      ],
      "id": "a94b0fcd-6403-48fa-ace8-dce8a9eaf7f7",
      "name": "Upload Scoping Prep To Storage",
      "credentials": {
        "httpHeaderAuth": {
          "id": "8o7ThfsHa3QWcSYa",
          "name": "GL AI Console Supabase Service Role Key"
        }
      }
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2368,
        -192
      ],
      "id": "ab1232dc-fd00-4ce6-af3e-00cebecd746b",
      "name": "Wait For File Upload",
      "webhookId": "c67a35f8-e38c-49ac-8c16-6124ee0f6db7"
    },
    {
      "parameters": {
        "tableId": "strms_project_files",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "project_id",
              "fieldValue": "={{ $('Catch Project ID').item.json.body.project_id }}"
            },
            {
              "fieldId": "file_type_id",
              "fieldValue": "scoping-prep-doc"
            },
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Generate Filename').item.json.generated_filename }}"
            },
            {
              "fieldId": "file_path",
              "fieldValue": "={{ $('Calculate File Size').item.json.storage_path }}"
            },
            {
              "fieldId": "file_size",
              "fieldValue": "={{ $('Calculate File Size').item.json.file_size }}"
            },
            {
              "fieldId": "uploaded_by",
              "fieldValue": "n8n-workflow"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "strms-project-files"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "={{ $('Calculate File Size').item.json.storage_path }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2592,
        -192
      ],
      "id": "e89e3b63-0a08-4ad9-89cd-a4607fbc2cb9",
      "name": "Insert File Metadata",
      "credentials": {
        "supabaseApi": {
          "id": "ZHhTrJNxn34MA3CW",
          "name": "GL AI Console Supabase Key"
        }
      }
    }
  ],
  "pinData": {
    "Catch Project ID": [
      {
        "json": {
          "headers": {
            "host": "n8n.srv1055749.hstgr.cloud",
            "user-agent": "PostmanRuntime/7.48.0",
            "content-length": "62",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br",
            "cache-control": "no-cache",
            "content-type": "application/json",
            "postman-token": "a6362a76-260e-49c0-8273-92c89e624409",
            "x-forwarded-for": "68.6.247.35",
            "x-forwarded-host": "n8n.srv1055749.hstgr.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "116d6ec74012",
            "x-real-ip": "68.6.247.35"
          },
          "params": {},
          "query": {},
          "body": {
            "project_id": "09d5316f-a8c5-42d6-aafa-04e7477e47d8"
          },
          "webhookUrl": "https://n8n.srv1055749.hstgr.cloud/webhook-test/scoping-call-prep",
          "executionMode": "test"
        }
      }
    ],
    "Wait For File Upload": [
      {
        "json": {
          "Key": "strms-project-files/09d5316f-a8c5-42d6-aafa-04e7477e47d8/scoping-prep-doc/project_09d5316f-a8c5-42d6-aafa-04e7477e47d8_scoping_call_prep_20251016_171930.txt",
          "Id": "6701b968-4886-4b53-9d5a-a8ba4065f51f"
        }
      }
    ]
  },
  "connections": {
    "Catch Project ID": {
      "main": [
        [
          {
            "node": "Validate Project ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Project ID": {
      "main": [
        [
          {
            "node": "Query Transcript Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Transcript Metadata": {
      "main": [
        [
          {
            "node": "Check Transcript Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Transcript Found": {
      "main": [
        [
          {
            "node": "Download Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Transcript": {
      "main": [
        [
          {
            "node": "Generate Scoping Call Prep",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Scoping Call Prep": {
      "main": [
        [
          {
            "node": "Format Scoping Call Prep Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Scoping Call Prep Doc": {
      "main": [
        [
          {
            "node": "Generate Filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Filename": {
      "main": [
        [
          {
            "node": "Calculate File Size",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate File Size": {
      "main": [
        [
          {
            "node": "Upload Scoping Prep To Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Scoping Prep To Storage": {
      "main": [
        [
          {
            "node": "Wait For File Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait For File Upload": {
      "main": [
        [
          {
            "node": "Insert File Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d92e1504-6a91-4522-b60c-6392b919da8b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f14113fc770fd9b2549e1172bcc9e56385af927f181d92711cbaa8bf45732284"
  },
  "id": "DFnKGbG3z5zN5lSg",
  "tags": []
}